#!/usr/bin/env python

import collections
import ipdb
import IPython
import functools
import logging
import os
import re
import sys
from pprint import pprint as pp

import numpy as np
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)


turns = [1,2,16,19,18,0]
# turns = [1,3,2]
turns = [2,1,3]
turns = [0, 3, 6]


iterations = 2020
iterations = 10

is_start = True

lookup = collections.defaultdict(list)

for tidx, t in enumerate(turns[:-1]):
    lookup[t].append(tidx)


for nidx in range(len(turns), iterations):
# for nidx in range(len(turns), 2020):
# for nidx in range(len(turns), 30000000):
    # log.debug('turns=%r', turns)

    last = turns[nidx-1]
    n = nidx + 1

    sampled = n % 1000 == 0
    sampled = True
    if sampled:
        print()
        log.warn('n=%r last=%r', n, last)

    if last not in lookup:
        val = 0

        if sampled:
            log.info('[unseen] val=%r', val)
    else:
        # prevs = []
        #
        # for tidx, t in enumerate(turns[::-1]):
        #     # log.debug('tidx=%r t=%r', tidx, t)
        #
        #     if t == last:
        #         # log.debug('tidx=%r t=%r break', tidx, t)
        #         prevs.append(tidx+1)
        #
        #         if len(prevs) == 2:
        #             break

        prevs = [lookup[last][-1]+1, n-1]
        log.debug('prevs=%r', prevs)
        # if n == 6 and prevs != [1, 4]:
        #     break

        val = prevs[1] - prevs[0]
        if sampled:
            log.info('[seen] val=%r', val)

        # if n == 7:
        #     ipdb.set_trace()

    is_start = False
    turns.append(val)
    lookup[last].append(nidx-1)

print()
log.info('n=%r val=%r', n, val)

