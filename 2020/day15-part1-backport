#!/usr/bin/env python

import collections
import functools
import logging
import os
import re
import sys
from pprint import pprint as pp

import numpy as np
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)

turns = [1,2,16,19,18,0]
# turns = [1,3,2]
# turns = [2,1,3]
turns = [0, 3, 6]
sturns = set(turns[:-1])

is_start = True

for nidx in range(len(turns), 10):
# for nidx in range(len(turns), 2020):
# for nidx in range(len(turns), 30000000):
    # log.debug('turns=%r', turns)

    last = turns[nidx-1]
    n = nidx + 1

    sampled = n % 1000 == 0
    sampled = True
    if sampled:
        log.warn('n=%r last=%r', n, last)

    if last not in sturns:
        val = 0
        sturns.add(last)

        if sampled:
            log.info('[unseen] val=%r', val)
    else:
        prevs = []

        for tidx, t in enumerate(turns[::-1]):
            # log.debug('tidx=%r t=%r', tidx, t)

            if t == last:
                # log.debug('tidx=%r t=%r break', tidx, t)
                prevs.append(tidx+1)

                if len(prevs) == 2:
                    break

        log.debug('prevs=%r', prevs)

        val = prevs[1] - prevs[0]
        if sampled:
            log.info('[seen] val=%r', val)

    is_start = False
    turns.append(val)

log.info('n=%r val=%r', n, val)

