#!/usr/bin/env python

import collections
import functools
import logging
import os
import re
import sys
from pprint import pprint as pp

import numpy as np
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)

challenge_name = os.path.basename(sys.argv[0])
challenge_shortname = challenge_name.split('-')[0]
log.info('challenge: %s short=%s', challenge_name, challenge_shortname)

fn = './%s.input' % challenge_shortname

log.info('reading fn=%s', fn)
with open(fn) as fh:
    raw_lines = fh.readlines()

map_width = 0
game_map = []
game_map_og = []

for line in raw_lines:
    log.debug('line=%r', line)
    line = line.strip().rstrip('\n').rstrip()
    if not line:
        continue

    if not map_width:
        map_width = len(line)

    game_map_og.append(line)

    map_line = []
    for char in line:
        if char in '#':
            map_line.append(1)
        elif char in '.':
            map_line.append(0)

    if not map_line:
        raise ValueError(map_line)

    game_map.append(map_line)


def get_pos(x, y):
    line = game_map[x]
    effective_y = y % map_width

    ret = game_map[x][effective_y]
    log.debug('[%d, %d] = %d effective_y=%d', x, y, ret, effective_y)
    return ret


def compute_trees_along_slope(slope):
    log.info('[slope=%r] computing trees', slope)

    positions = []
    val = 0

    x, y = 0, 0
    while x < len(game_map):
        pos = get_pos(x, y)
        positions.append(pos)
        val += pos

        x += slope[0]
        y += slope[1]

    log.debug('[slope=%r] positions=%r', slope, positions)
    log.info('[slope=%r] val=%d', slope, val)
    return val


slopes = [(1, 1), (1, 3), (1, 5), (1, 7), (2, 1)]
log.info('slopes=%r', slopes)

trees_per_slope = [compute_trees_along_slope(s) for s in slopes]
log.info('trees_per_slope=%r', trees_per_slope)

answer = functools.reduce(lambda x, y: x*y, trees_per_slope)
log.info('answer=%r', answer)

