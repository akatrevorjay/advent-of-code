#!/usr/bin/env python

import collections
import functools
import logging
import operator
import os
import random
import re
import string
import sys
import typing as T
from dataclasses import dataclass
from pprint import pprint as pp

import ipdb
import numpy as np

import attr
import IPython
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)

challenge_name = os.path.basename(sys.argv[0])
challenge_shortname = challenge_name.split('-')[0]
log.info('challenge: %s short=%s', challenge_name, challenge_shortname)


def slurp(fn: str):
    log.info('reading fn=%s', fn)
    with open(fn) as fh:
        raw_lines = fh.readlines()

    lines = []
    for line in raw_lines:
        log.debug('line=%r', line)
        line = line.strip().rstrip('\n').rstrip()

        if not line or line.startswith('#'):
            continue
        lines.append(line)

    return lines


suffix = '-part2-test'
# suffix = '-test'

fn = './%s.input%s' % (challenge_shortname, suffix)
answers_fn = './%s.answers%s' % (challenge_shortname, suffix)
lines = slurp(fn)
answers = slurp(answers_fn)


class RuleError(Exception):
    pass


class RuleFailed(RuleError):
    pass


@attr.s
class IRule:
    def __call__(self, msg: str, pos: int = 0):
        raise NotImplementedError()


@attr.s
class SeqRule:
    children = attr.ib(factory=list)

    def __call__(self, msg: str, pos: int = 0):
        for meth in self.children:
            char = msg[pos]
            log.debug('[%r] [msg=%r, pos=%d] %r(%r)', self, msg, pos, meth, char)
            pos = meth(msg=msg, pos=pos)
        return pos


@attr.s
class GreedyRepeatingLiteralRule:
    match = attr.ib()

    def __call__(self, rules: list, msg: str, pos: int = 0):
        ok = False

        while True:
            for char in self.match:
                log.debug('repeating: [%r] [msg=%r, pos=%d] does %r == %r', self, msg, pos, char, msg[pos])
                if msg[pos] != char:
                    pos -= 1
                    break
                else:
                    ok = True
                pos += 1

        if not ok:
            raise RuleFailed(f'{self} msg={msg} pos={pos} char={char}')

        return pos


@attr.s
class GreedyRepeatingRule:
    children = attr.ib(factory=list)

    def __call__(self, rules: list, msg: str, pos: int = 0):
        ok = False

        cont = True
        while cont:
            for midx, meth in enumerate(self.children):
                char = msg[pos]
                log.info('repeating[%d/%d]: [%r] [msg=%r, pos=%d]', midx + 1, len(self.children), self, msg, pos)
                log.info('repeating[%d/%d]: %r(%r)', midx + 1, len(self.children), meth, char)

                try:
                    new_pos = meth(rules=rules, msg=msg, pos=pos)

                    log.info('ok pos=%r', pos)
                    pos = new_pos
                    ok = True
                    break
                except RuleError as exc:
                    log.warning('exc=%r', exc)
                    pos -= 1
                    cont = False
                    break

                pos += 1

        if not ok:
            raise RuleFailed(f'{self} msg={msg} pos={pos} char={char}')

        return pos


@attr.s
class LiteralRule:
    match = attr.ib()

    @property
    def children(self):
        return self.match

    def __call__(self, rules: list, msg: str, pos: int = 0):
        for cidx, char in enumerate(self.match):
            remaining = msg[pos:]
            try:
                msg[pos]
            except IndexError:
                raise RuleFailed(f'{self} remaining={remaining} pos={pos} IndexError')

            # log.debug('literal: [%r] [msg=%r, pos=%d] does %r == %r', self, msg, pos, char, msg[pos])
            # log.debug('-- %r: [msg=%r, pos=%d, char=%r]', self, msg, pos, char)
            log.debug('-- [%d/%d] %r: msg[pos=%r:]=%r', cidx + 1, len(self.children), self, pos, msg[pos:])
            log.debug('does %r == %r', char, msg[pos])

            if msg[pos] != char:
                raise RuleFailed(f'{self} msg={msg} pos={pos} char={char}')

            pos += 1
            log.debug('pos++ = %r', pos)

        return pos


@attr.s
class LookupRule:
    children = attr.ib(factory=list)

    def __call__(self, rules: list, msg: str, pos: int = 0):
        for cidx, c in enumerate(self.children):
            remaining = msg[pos:]
            try:
                msg[pos]
            except IndexError:
                raise RuleFailed(f'{self} remaining={remaining} pos={pos} IndexError')

            log.debug('-- [%d/%d] %r: msg[pos=%r:]=%r', cidx + 1, len(self.children), self, pos, msg[pos:])

            if c[0] in string.digits:
                rule_idx = int(c)
                meth = rules[rule_idx]
                log.debug('lookup rule_idx=%r meth=%r', rule_idx, meth)
                pos = meth(rules=rules, msg=msg, pos=pos)
            else:
                for charidx, char in enumerate(c):
                    # literal
                    log.debug('lookliteral: [charidx=%d] does %r == %r?', charidx, msg[pos], char)
                    if msg[pos] != char:
                        raise RuleFailed(f'{self} msg={msg} pos={pos} char={char}')

                    pos += 1
                    log.debug('pos++ = %r', pos)

        return pos


"""
Is this breaking out the first match it gets? That would avoid a true repeat from happening.
"""


@attr.s
class OrRule:
    children = attr.ib(factory=list)

    def __call__(self, rules: list, msg: str, pos: int = 0):
        log.debug('++ [[ %r: [msg=%r, pos=%d]', self, msg, pos)

        ok = False

        for midx, meth in enumerate(self.children):
            log.debug('-- [%d/%d] %r: msg[pos=%r:]=%r', midx + 1, len(self.children), self, pos, msg[pos:])

            # log.info('or[%d/%d]: [%r] [msg=%r, pos=%d] %r(%r)', midx+1, len(self.children), self, msg, pos, meth, char)
            # log.info('or[%d/%d]: [%r] [msg=%r, pos=%d]', midx + 1, len(self.children), self, msg, pos)
            # log.info('or[%d/%d]: %r(%r)', midx + 1, len(self.children), meth, char)

            try:
                new_pos = meth(rules=rules, msg=msg, pos=pos)

                log.info('ok pos=%r', pos)
                pos = new_pos
                ok = True
                break
            except RuleError as exc:
                log.warning('exc=%r', exc)

        if not ok:
            log.debug('++ ]] xx %r: [msg=%r, pos=%d]', self, msg, pos)
            raise RuleFailed(f'{self} msg={msg} pos={pos}')

        log.debug('++ ]] %r: [msg=%r, pos=%d]', self, msg, pos)

        return pos


rules = {}

for _, l in enumerate(lines):
    log.error('line=%r', l)
    lhead, lrule = l.split(' ', 1)
    lidx = int(lhead.split(':', 1)[0])

    if literals := re.findall(r'^"(\w)"$', lrule):
        r = LiteralRule(match=literals)
        # r = LookupRule(children=literals)
    else:
        ors = lrule.split(' | ')

        children = []
        for seq in ors:
            seq = seq.replace('"', '')
            seq = re.split(r'\s+', seq)

            cr = LookupRule(children=seq)

            # HACK for debugging swap literals
            # log.debug('seq=%r', seq)
            # new_seq = []
            # for item in seq:
            #     log.debug('item=%r', item)
            #     if item == '1':
            #         item = 'a'
            #     elif item == '14':
            #         item = 'b'
            #     new_seq.append(item)
            # cr = LookupRule(children=new_seq)

            children.append(cr)

        if len(children) > 1:
            r = OrRule(children=children)
        else:
            r = children[0]

    rules[lidx] = r

rule = functools.partial(rules[0], rules=rules)
cnt = collections.Counter()
good = set()
progress = []

for answer in answers:
    print()
    print()
    log.error('answer=%r', answer)
    try:
        pos = rule(rules=rules, msg=answer)
        if pos < len(answer):
            raise RuleFailed(f'length pos={pos} < len(answer)={len(answer)}')

        good.add(answer)
        progress.append(True)
    except RuleError as exc:
        log.exception('rule=%r with exc=%r', rule, exc)

        progress.append(False)

success = len(good)
log.info('success=%d', success)

expected_good_test_old = set([
    'bbabbbbaabaabba',
    'ababaaaaaabaaab',
    'ababaaaaabbbaba',
])

expected_good_test = set([
    'bbabbbbaabaabba',
    'babbbbaabbbbbabbbbbbaabaaabaaa',
    'aaabbbbbbaaaabaababaabababbabaaabbababababaaa',
    'bbbbbbbaaaabbbbaaabbabaaa',
    'bbbababbbbaaaaaaaabbababaaababaabab',
    'ababaaaaaabaaab',
    'ababaaaaabbbaba',
    'baabbaaaabbaaaababbaababb',
    'abbbbabbbbaaaababbbbbbaaaababb',
    'aaaaabbaabaaaaababaa',
    'aaaabbaabbaaaaaaabbbabbbaaabbaabaaa',
    'aabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba',
])
