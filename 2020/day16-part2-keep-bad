#!/usr/bin/env python

import random
import collections
import functools
import logging
import os
import re
import sys
from pprint import pprint as pp

import numpy as np
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)

challenge_name = os.path.basename(sys.argv[0])
challenge_shortname = challenge_name.split('-')[0]
log.info('challenge: %s short=%s', challenge_name, challenge_shortname)

fn = './%s.input' % challenge_shortname


rules = {
    'departure location': lambda x: x in range(42, 570 + 1) or x in range(579, 960 + 1),
    'departure station': lambda x: x in range(45, 101 + 1) or x in range(118, 967 + 1),
    'departure platform': lambda x: x in range(36, 374 + 1) or x in range(394, 958 + 1),
    'departure track': lambda x: x in range(48, 212 + 1) or x in range(233, 950 + 1),
    'departure date': lambda x: x in range(41, 481 + 1) or x in range(492, 953 + 1),
    'departure time': lambda x: x in range(38, 266 + 1) or x in range(274, 955 + 1),
    'arrival location': lambda x: x in range(32, 560 + 1) or x in range(567, 951 + 1),
    'arrival station': lambda x: x in range(44, 738 + 1) or x in range(762, 970 + 1),
    'arrival platform': lambda x: x in range(40, 675 + 1) or x in range(685, 949 + 1),
    'arrival track': lambda x: x in range(25, 320 + 1) or x in range(344, 954 + 1),
    'class': lambda x: x in range(32, 806 + 1) or x in range(815, 959 + 1),
    'duration': lambda x: x in range(38, 121 + 1) or x in range(129, 958 + 1),
    'price': lambda x: x in range(35, 692 + 1) or x in range(706, 957 + 1),
    'route': lambda x: x in range(36, 890 + 1) or x in range(901, 951 + 1),
    'row': lambda x: x in range(35, 282 + 1) or x in range(288, 964 + 1),
    'seat': lambda x: x in range(35, 445 + 1) or x in range(469, 954 + 1),
    'train': lambda x: x in range(45, 294 + 1) or x in range(317, 968 + 1),
    'type': lambda x: x in range(44, 240 + 1) or x in range(265, 960 + 1),
    'wagon': lambda x: x in range(32, 816 + 1) or x in range(825, 971 + 1),
    'zone': lambda x: x in range(30, 629 + 1) or x in range(637, 968 + 1),
}

depart_rules = {k: v for k, v in rules.items() if 'depart' in k}

rules_test = {
    'class': lambda x: x in range(1, 3 + 1) or x in range(5, 7 + 1),
    'row': lambda x: x in range(6, 11 + 1) or x in range(33, 44 + 1),
    'seat': lambda x: x in range(13, 40 + 1) or x in range(45, 50 + 1),
}

rules_test2 = {
    'class': lambda x: x in range(0, 1 + 1) or x in range(4, 19 + 1),
    'row': lambda x: x in range(0, 5 + 1) or x in range(8, 19 + 1),
    'seat': lambda x: x in range(0, 13 + 1) or x in range(16, 19 + 1),
}


# rules = rules_test2
# fn = './%s.input-test-part2' % challenge_shortname

log.info('reading fn=%s', fn)
with open(fn) as fh:
    raw_lines = fh.readlines()

lines = []
for line in raw_lines:
    log.debug('line=%r', line)
    line = line.strip().rstrip('\n').rstrip()

    if not line:
        continue
    lines.append(line)

all_tickets = [[int(y) for y in x.split(',')] for x in lines]
my_ticket = all_tickets[0]
tickets = all_tickets[1:]


valid_tickets = []

invalids = []
for tidx, t in enumerate(all_tickets):
    log.warning('[%r] t=%r', tidx, t)

    vals_used = set()
    ok = True
    for col in t:
        col_ok = False
        for valname, val in rules.items():
            if valname in vals_used:
                continue
            if val(col):
                log.info('col=%r valname=%r success', col, valname)
                col_ok = True
                vals_used.add(valname)
                break

        if not col_ok:
            log.debug('invalid col=%r', col)

            invalids.append(col)
            ok = False
            # break

    if ok:
        valid_tickets.append(t)

print()
print()

# scan_tickets = valid_tickets + [my_ticket]
scan_tickets = valid_tickets

cols_matched = collections.defaultdict(set)

for tidx, t in enumerate(scan_tickets):
    log.warning('[%r] t=%r', tidx, t)

    vals_used = set()
    ok = True
    for cidx, col in enumerate(t):
        col_ok = False
        for valname, val in rules.items():
            if valname in vals_used:
                continue

            if val(col):
                log.info('col=%r valname=%r success', col, valname)
                col_ok = True

                cols_matched[cidx].add(valname)
                vals_used.add(valname)
                break

        if not col_ok:
            log.debug('invalid col=%r', col)
#
            invalids.append(col)
            ok = False
            # break

matched_cols = {k: v.copy().pop() for k, v in cols_matched.items() if len(v) == 1}
unmatched_cols = {k: v for k, v in cols_matched.items() if len(v) > 1}

care_cols = {}
for k, v in unmatched_cols.items():
    if any(['depart' in x for x in v]):
        care_cols[k] = v


# 1658065402429 too high
# 1109037123479 too high

print()
print()


used_valnames = set()
matched_all = collections.defaultdict(set)

# for col, valnames in care_cols.items():
for col, valnames in cols_matched.items():
    valnames = list(valnames)
    log.warning('[col=%r] t=%r', col, valnames)

    while True:
        unused_valnames = set()

        for valname in valnames:
            if valname in used_valnames:
                continue

            val = rules[valname]

            ok = True
            for tidx, t in enumerate(scan_tickets):
                log.info('[%r] t=%r', tidx, t)

                if not val(t[col]):
                    ok = False
                    break

            if ok:
                matched_all[col].add(valname)
                used_valnames.add(valname)
            else:
                log.error('unused valname=%r', valname)
                unused_valnames.add(valname)

        if unused_valnames:
            random.shuffle(valnames)
        else:
            break
        break




