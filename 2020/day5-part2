#!/usr/bin/env python

import collections
import functools
import logging
import operator
import os
import random
import re
import string
import sys
import typing as T
from pprint import pprint as pp

import ipdb
import IPython
import numpy as np
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)

challenge_name = os.path.basename(sys.argv[0])
challenge_shortname = challenge_name.split('-')[0]
log.info('challenge: %s short=%s', challenge_name, challenge_shortname)


def slurp(fn: str):
    log.info('reading fn=%s', fn)
    with open(fn) as fh:
        raw_lines = fh.readlines()

    lines = []
    for line in raw_lines:
        log.debug('line=%r', line)
        line = line.strip().rstrip('\n').rstrip()

        if not line:
            continue
        lines.append(line)

    return lines


fn = './%s.input' % challenge_shortname
lines = slurp(fn)


rows = 128
cols = 8

row = 128
col = 8

row_range = [1, 128]

seat_id = 0

powers = 8


def compute(
    ops: str,
    lower: int = 0,
    count: int = 128,
):
    upper = count-1
    # step = upper - lower + 1
    step = count
    for op in ops:
        log.info('beg: %d-%r step=%r', lower, upper, step)

        assert step % 2 == 0
        step //= 2

        log.debug('op=%r', op)

        if op in 'FL':
            log.debug('lower')
            upper -= step
        if op in 'BR':
            log.debug('upper')
            lower += step

    log.info('ops=%r ret=%d-%r', ops, lower, upper)

    return lower, upper

# compute('FBFBBFF', 0, 128)
# compute('RLR', 0, 8)
# compute('FBFBBFFRLR', 0, 128)


def compute_seatid(line: str):
    log.info('line=%r', line)
    lv, lh = line[:7], line[7:]

    row = compute(lv, count=128)
    assert row[0] == row[1]
    col = compute(lh, count=8)
    assert col[0] == col[1]
    log.debug('row=%r col=%r', row, col)

    seatid = row[0] * 8 + col[0]
    log.debug('seatid=%r', seatid)
    return seatid


rets = []
for line in lines:
    res = compute_seatid(line)
    rets.append(res)


lookup = set(rets)
for idx in range(rets[0], rets[-1]):
    if idx not in lookup:
        print(idx)

