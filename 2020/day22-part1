#!/usr/bin/env python

import collections
import functools
import logging
import operator
import os
import random
import re
import string
import sys
import typing as T
from dataclasses import dataclass, field
from pprint import pprint as pp

import ipdb
import numpy as np

import attr
import IPython
import pytutils.log

pytutils.log.configure()

log = logging.getLogger(__name__)

challenge_name = os.path.basename(sys.argv[0])
challenge_shortname = challenge_name.split('-')[0]
log.info('challenge: %s short=%s', challenge_name, challenge_shortname)


def slurp(fn: str):
    log.info('reading fn=%s', fn)
    with open(fn) as fh:
        raw_lines = fh.readlines()

    lines = []
    for line in raw_lines:
        log.debug('line=%r', line)
        line = line.strip().rstrip('\n').rstrip()

        if not line or line.startswith('#'):
            continue
        lines.append(line)

    return lines


suffix = ''
# suffix = '-test'

fn = './%s.input%s' % (challenge_shortname, suffix)
lines = slurp(fn)
# answers_fn = './%s.answers%s' % (challenge_shortname, suffix)
# answers = slurp(answers_fn)


@dataclass
class Player:
    pid: int
    # cards: T.List[int] = field(default_factory=list)
    cards: collections.deque = field(default_factory=collections.deque)

    def calc_score(self) -> int:
        cards = [self.cards[cid]*mult for cid, mult in enumerate(range(len(self.cards), 1 - 1, -1))]
        return sum(cards)


num_players = 2
players = [Player(pid=pid) for pid in range(num_players)]

cur_player = None
for line in lines:
    if m_player := re.findall(r'^Player (\d+):$', line):
        pid = int(m_player[0]) - 1
        cur_player = players[pid]

    elif cur_player:
        cur_player.cards.append(int(line))

pp(players)

num_rounds = 0


def status():
    # pp(players)
    [print(f"Player {p.pid}'s deck: {' '.join([str(c) for c in p.cards])}") for p in players]


def play_round():
    global num_rounds

    print()
    log.warning('-- Round %d', num_rounds)
    status()

    cards = [p.cards.popleft() for p in players]
    # log.debug('cards=%r', cards)
    [print(f"Player {p.pid} plays: {cards[p.pid]}") for p in players]

    if cards[0] > cards[1]:
        winner_pid = players[0].pid
    else:
        winner_pid = players[1].pid
    winner = players[winner_pid]
    # log.debug('winner=%r', winner)
    print(f'Player {winner.pid} wins the round!')

    winner.cards.extend(reversed(sorted(cards)))
    num_rounds += 1
    return winner


def is_game_over():
    counts = [not bool(p.cards) for p in players]
    return any(counts)


while not is_game_over():
    winner = play_round()

print()
print(winner)
print(winner.calc_score())

